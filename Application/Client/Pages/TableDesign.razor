@page "/Tabledesign"
@using System.Data;
@using System.Net.Http.Json
@using System.Text.Json
@inject HttpClient Http
@using Entities.Models




<div class="row">
    <div class="col-md-12">
        <h4>Table View</h4>

        <div class="container">
            <button class="btn btn-info m-1 p-1">New</button>
            <table class="table table-dark">
                <thead>

                    <tr>
                        <th>Commands</th>

                        @foreach (var item in columns)
                        {
                            <th>@item.Name</th>
                        }

                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td><button class="btn btn-dark btn-outline-info m-1 p-1">Update</button><button class="btn btn-dark btn-outline-info m-1 p-1">Delete</button></td>
                        @foreach (var item in values)
                        {

                            <td>@item.Value1</td>
                        }

                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

<div class="row m-2 p-2">
    <h4>Table Design</h4>
    <div class="col-lg-12">
        <div class="container m-2 p-2">
            <ul class="list-group">



                @for (int i = 0; i < allColumns.Count; i++)
                {
                    int _index = i;


                    <li class="list-group-horizontal">
                        <button class="btn btn-danger m-1 p-1" @onclick="()=>DeleteColumn(allColumns[_index].Id)">Delete</button>

                        <input placeholder="@allColumns[_index].Name" id="@allColumns[_index].Id" type="text" @bind="_value" @onkeydown="UpdateColumn" @onclick="()=>GetId(allColumns[_index].Id)" />
                        @if (allColumns[_index].IsVisible == true)
                        {
                            <input type="checkbox" checked="checked" @onclick="()=>GetId(allColumns[_index].Id)" class="m-1 p-1" @onchange="Hide" /> <label>Visible</label>

                        }
                        @if (allColumns[_index].IsVisible == false)
                        {
                            <input type="checkbox" @onclick="()=>GetId(allColumns[_index].Id)" class="m-1 p-1" @onchange="Hide" /> <label>Visible</label>

                        }
                        @if (_index != 0)
                        {
                            <button class="btn btn-success p-1 m-1" @onclick='()=>ChangeColumnOrder(allColumns[_index-1].Order,allColumns[_index].Id)'>Up</button>
                        }
                        @if (_index != allColumns.Count - 1)
                        {
                            <button class="btn btn-success p-1 m-1" @onclick='()=>ChangeColumnOrder(allColumns[_index+1].Order,allColumns[_index].Id)'>Down</button>
                        }
                    </li>

                }

            </ul>
        </div>

        <button @onclick="AddNewColumn" class="btn btn-info m-1 p-1">Add</button>
        <label class="col-form-label m-1 p-1">Column Name :</label>
        <input type="text" @bind="columnName" placeholder="New Column" />

    </div>
</div>

<div class="row">
    <div class="col-md-12 m-3 p-2">

        <h4>Form View</h4>


        <div class="container m-1 p-1">
            <EditForm Model="@val" OnInvalidSubmit="AddRecord">
                <div class="form-group">
                    @foreach (var item in columns)
                    {
                        <label for="@item.Id" class="col-form-label ">@item.Name</label>
                        <InputText class="m-1 p-1" type="text" id="@item.Id" @bind-Value="@val.Value1" />


                        <InputNumber hidden id="Id" type="number" placeholder="@item.Id" @bind-Value="@val.ColumnId" />
                        <InputNumber hidden id="record" type="number" placeholder="1" @bind-Value="@val.RecordId" />

                    }

                    <input class="btn btn-danger" value="Save" type="submit" />
                </div>
            </EditForm>

        </div>
    </div>
</div>


<div class="row">
    <div class="col-md-12 m-3 p-2">

        <h4>System Logs</h4>


        <div class="container m-1 p-1">
            <ul class="list-group">
                 @foreach (var item in Logs)
                 {
                <li>@item</li>
                 }



            </ul>

        </div>
    </div>
</div>

@code {


    private bool isChecked = false;
    private string columnName;
    private string entity;
    private int id;
    private string _value { get; set; }

    public Values val = new();


    List<Column> columns = new List<Column>();
    List<Values> values = new List<Values>();
    List<Column> allColumns = new List<Column>();
    List<string> Logs = new List<string>();


    protected void GetId(int value)
    {
        id = value;
    }


    protected override async Task OnInitializedAsync()
    {


        columns = await Http.GetFromJsonAsync<List<Column>>("/api/Column/GetVisibleColumns");
        values = await Http.GetFromJsonAsync<List<Values>>("/api/Value/TableView");
        allColumns = await Http.GetFromJsonAsync<List<Column>>("/api/Column/GetAllColumns");
        Logs = await Http.GetFromJsonAsync<List<string>>("api/SystemLog/GetAllLogs");


    }

    private async Task AddNewColumn()
    {
        int? order = 0;
        var setOrderNumber = await Http.GetFromJsonAsync<List<Column>>("/api/Column/GetAllColumns");
        if (setOrderNumber.Count < 1)
        {
            order = 1;
        }
        else if (setOrderNumber.Count > 0)
        {
            var query = setOrderNumber.OrderByDescending(x => x.Order).FirstOrDefault();
            order = query.Order + 1;
        }
        Column column = new Column { Name = columnName, IsVisible = true, Order = order };
        var response = await Http.PostAsJsonAsync<Column>("/api/Column/AddColumn", column);
        response.StatusCode.ToString();

        await OnInitializedAsync();

    }



    private async Task DeleteColumn(int Id)
    {
        var response = await Http.DeleteAsync("/api/Column/Delete/" + Id);
        response.StatusCode.ToString();

        await OnInitializedAsync();
    }

    private async Task UpdateColumn(KeyboardEventArgs e)
    {
        if (e.Code == "Enter")
        {
            var oldRecord = await Http.GetFromJsonAsync<List<Column>>("/api/Column/GetAll");
            var list = oldRecord.FirstOrDefault(x => x.Id == id);

            Column col = new Column { Name = _value, IsVisible = list.IsVisible, Order = list.Order };
            var response = await Http.PutAsJsonAsync($"/api/Column/UpdateColumns/{id}", col);
            await OnInitializedAsync();
        }


    }
    private async Task Hide(ChangeEventArgs e)
    {
        isChecked = Convert.ToBoolean(e.Value);
        var get = await Http.GetFromJsonAsync<List<Column>>("/api/Column/GetAll");
        var oldRecord = get.FirstOrDefault(x => x.Id == id);

        Column column = new Column { IsVisible = isChecked, Order = oldRecord.Order, Name = oldRecord.Name };

        var result = await Http.PutAsJsonAsync<Column>($"/api/Column/UpdateRecord/{id}", column);
        var repsonse = result.StatusCode.ToString();
        await OnInitializedAsync();
    }


    private async Task ChangeColumnOrder(int? order, int id)
    {
        var list = await Http.GetFromJsonAsync<List<Column>>("/api/Column/GetAllColumns");
        var col1 = list.FirstOrDefault(x => x.Id == id);
        var col2 = list.FirstOrDefault(x => x.Order == order);

        Column column1 = new Column { Name = col1.Name, Order = col2.Order, IsVisible = col1.IsVisible };
        Column column2 = new Column { Name = col2.Name, Order = col1.Order, IsVisible = col2.IsVisible };


        var response2 = await Http.PutAsJsonAsync($"/api/Column/UpdateColumns/{col1.Id}", column1);

        var response = await Http.PutAsJsonAsync($"/api/Column/UpdateColumns/{col2.Id}", column2);
        response.StatusCode.ToString();
        response2.StatusCode.ToString();

        await OnInitializedAsync();
    }
    private async Task AddRecord()
    {


        var response = await Http.PostAsJsonAsync<Values>("/api/Column/AddValue", val);
        await OnInitializedAsync();


    }





}
